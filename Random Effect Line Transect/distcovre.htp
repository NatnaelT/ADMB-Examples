#define SEPFUN1
#define SEPFUN3
#define SEPFUN4
class model_data : public ad_comm{
  public:
  data_int  n;
  data_vector xs;
  data_number  width;
  data_int  ifct;
  data_int  pt;
  data_ivector links;
  data_ivector k;
  data_3array dm;
  int obs_index;
  int par_index;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  friend class df1b2_pre_parameters;
  friend class df1b2_parameters;
  static model_parameters * model_parameters_ptr;
  static model_parameters * get_model_parameters_ptr(void)
  {
    return model_parameters_ptr;
  }
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  ivector integer_control_flags;
  void begin_df1b2_funnel(void);
  void end_df1b2_funnel(void);
  dvector double_control_flags;
  param_init_matrix beta;
  param_init_bounded_vector sigma;
  param_matrix parmat;
  random_effects_matrix u;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value  f;
public:
  virtual void userfunction(void);
  virtual void report(void);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void);
  virtual void AD_uf_inner(void){pre_userfunction();}
  virtual void AD_uf_outer(void){pre_userfunction();}
  virtual void user_function(void){;}
  virtual void allocate(void){;}
 dvar_vector reals(dmatrix& dm, dvar_vector& beta, int ilink);
 dvariable h(const double x);
 dvariable adromb(double a,double b,int ns);
 dvariable trapzd(double a,double b,int n,const dvariable& s);

};
  
class df1b2_pre_parameters : public model_parameters
{ 
public: 
  df1b2_pre_parameters(int sz,int argc, char * argv[]) : 
    model_parameters(sz,argc,argv){;}
  re_objective_function_value  f;
  void begin_df1b2_funnel(void); 
  void setup_quadprior_calcs(void); 
  void end_df1b2_funnel(void);
}; 
 
class df1b2_parameters : public df1b2_pre_parameters 
{ 
public: 
  static df1b2_parameters * df1b2_parameters_ptr;
  static df1b2_parameters * get_df1b2_parameters_ptr(void) 
  { 
    return df1b2_parameters_ptr; 
  } 
  df1b2_parameters(int sz,int argc, char * argv[]) : 
    df1b2_pre_parameters(sz,argc,argv) 
  { 
    df1b2_parameters_ptr=this;
  }
  df1b2_init_matrix beta;
  df1b2_init_bounded_vector sigma;
  df1b2matrix parmat;
  df1b2_init_matrix u;
  df1b2variable prior_function_value;
  df1b2variable likelihood_function_value;
   // re_objective_function_value  f;
  virtual void user_function(void); 
  virtual void allocate(void); 
 // void begin_df1b2_funnel(void); 
 // void setup_quadprior_calcs(void); 
 // void end_df1b2_funnel(void);
 df1b2vector reals(dmatrix& dm, df1b2vector& beta, int ilink);
 df1b2variable h(const double x);
 df1b2variable adromb(double a,double b,int ns);
 df1b2variable trapzd(double a,double b,int n,const df1b2variable& s);

};
